// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AdminQuestionnaire container renders without crashing 1`] = `
<AdminQuestionnairesContainer
  fetchAdminQuestionnaires={[Function]}
  isLoading={true}
  match={
    Object {
      "url": "/admin/questionnaires",
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <div>
    <Loading>
      <div
        className="loading-screen"
      >
        <img
          alt="loadig"
          id="loading"
          src="https://tools.cisco.com/security/center/Resources/images/loader.gif"
        />
      </div>
    </Loading>
  </div>
</AdminQuestionnairesContainer>
`;

exports[`AdminQuestionnaire container when questionnaires data is available renders Questionnaires component 1`] = `
<Questionnaires
  questionnaires={
    Object {
      "1": Object {
        "id": 1,
        "title": "Cat breeds",
      },
      "2": Object {
        "id": 2,
        "title": "Cat breeds Questionnaire Part 2",
      },
    }
  }
  url="/admin/questionnaires"
/>
`;

exports[`AdminQuestionnaire container when questionnaires data is available renders self with questionnaires props 1`] = `
<AdminQuestionnairesContainer
  fetchAdminQuestionnaires={[Function]}
  isLoading={false}
  questionnaires={
    Object {
      "1": Object {
        "id": 1,
        "title": "Cat breeds",
      },
      "2": Object {
        "id": 2,
        "title": "Cat breeds Questionnaire Part 2",
      },
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "notify": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "unsubscribe": null,
    }
  }
/>
`;
